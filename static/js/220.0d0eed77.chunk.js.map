{"version":3,"file":"static/js/220.0d0eed77.chunk.js","mappings":"uPAEaA,EAAYC,EAAAA,EAAAA,IAAH,+KAaTC,GAJYD,EAAAA,EAAAA,GAAH,kEAIDA,EAAAA,EAAAA,GAAH,6CAGLE,EAAgBF,EAAAA,EAAAA,IAAH,kJ,qMCdbG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,mRAaLK,EAAQL,EAAAA,EAAAA,MAAH,+GAOLM,GAAQN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,iYAqBLQ,EAASR,EAAAA,EAAAA,OAAH,2cAwBNS,GAAQT,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAH,oGAOMA,EAAAA,EAAAA,IAAH,2B,8LCnERW,EAAmB,WAC9B,OAAsDC,EAAAA,EAAAA,MAA9CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,MAAOC,EAArC,EAAqCA,aAErC,OACE,UAAC,KAAD,CAAOC,SAAUD,EAAjB,WACE,UAAC,KAAD,CAAOE,QAAQ,QAAf,UAAuB,oBACH,IAClB,SAAC,KAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,MAAOT,EAAOU,MACdC,SAAUV,KAEZ,SAAC,KAAD,CAAOM,KAAK,QAAQK,UAAU,YAGhC,UAAC,KAAD,CAAOP,QAAQ,WAAf,UAA0B,WACf,IACT,SAAC,KAAD,CACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,MAAOT,EAAOa,SACdF,SAAUV,KAEZ,SAAC,KAAD,CAAOM,KAAK,WAAWK,UAAU,YAGnC,SAAC,KAAD,CACEJ,KAAK,SACLM,UAAWZ,IAAUF,EAAOU,QAAUV,EAAOa,SAF/C,SAGC,aAKN,E,oBCnCYE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAkCC,EAAAA,EAAAA,MAAlC,eAAOC,EAAP,KAAmBC,EAAnB,KAAmBA,UAEbnB,EAAY,mCAAG,WAAOH,EAAP,mFAAiBuB,EAAjB,EAAiBA,UAAjB,kBAEMF,EAAS,CAC9Bd,KAAMP,EAAOO,KACbG,MAAOV,EAAOU,MACdG,SAAUb,EAAOa,WAChBW,SANc,QAEXC,EAFW,QAQJC,QACXV,GAASW,EAAAA,EAAAA,IAASF,EAASC,QAC3BV,GAASY,EAAAA,EAAAA,IAAQH,EAASI,OAC1BX,EAAS,cAXM,gDAcjBY,EAAAA,OAAAA,QAAA,uBAA+B,KAAMC,SACrCf,GAASgB,EAAAA,EAAAA,IAAS,EAAD,KACjBd,EAAS,UAhBQ,QAmBnBK,IAnBmB,yDAAH,wDAsBlB,OACE,SAAC,KAAD,CACEU,cAAe,CACbvB,MAAO,GACPG,SAAU,IAEZT,SAAUD,EALZ,SAOG,kBACC,UAAC,KAAD,WACGmB,IAAa,SAACY,EAAA,EAAD,IAAW,KAAC,SAACpC,EAAD,MAF7B,GAON,E,UClDc,SAASqC,IACtB,OACE,+BACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,2BAAO,aAET,SAACpB,EAAD,QAIP,C","sources":["components/App.styled.jsx","components/RegistrationForm/RegistrationForm.styled.jsx","components/LoginForm/LoginFormContext.jsx","components/LoginForm/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #010101;\n  gap: 50px;\n  margin-top: 50px;\n`;\nexport const MainTitle = styled.h1`\n  font-size: 60px;\n  font-weight: bold;\n`;\nexport const Title = styled.h2`\n  font-size: 50px;\n`;\nexport const ContainerHome = styled.div`\nmargin-left:auto;\nmargin-right:auto;\n  text-align: center;\n  max-width: 500px;\n  color: #010101;\n  margin-top: 50px;\n`;\n","import styled from '@emotion/styled';\n\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  gap: 30px;\n  flex-direction: column;\n  align-items: center;\n  width: 460px;\n  padding: 50px 20px;\n  // border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  // background-color: white;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 26px;\n  font-weight: bold;\n`;\n\nexport const Input = styled(Field)`\n  padding: 8px;\n  border: 1px solid #ccc;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  font-size: 24px;\n  width: 100%;\n  min-width: 300px;\n  margin-top: 5px;\n  transition: all 0.4s ease-in-out;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.4);\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: #444;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  font-size: 20px;\n  font-weight: bold;\n  cursor: pointer;\n  text-transform: uppercase;\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);\n  transition: all 0.4s ease-in-out;\n\n  &:hover {\n    background-color: #333;\n    transform: scale(1.05);\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n  margin-top: 5px;\n  max-width: 200px;\n`;\n\nexport const FormWrap = styled.div`\n\n\n`;","import { useFormikContext } from 'formik';\nimport {\n  Forma,\n  Label,\n  Input,\n  Button,\n  Error,\n} from 'components/RegistrationForm/RegistrationForm.styled';\n\nexport const LoginFormContext = () => {\n  const { values, handleChange, dirty, handleSubmit } = useFormikContext();\n\n  return (\n    <Forma onSubmit={handleSubmit}>\n      <Label htmlFor=\"email\">\n        Registered Email {''}\n        <Input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          value={values.email}\n          onChange={handleChange}\n        />\n        <Error name=\"email\" component=\"div\" />\n      </Label>\n\n      <Label htmlFor=\"password\">\n        Password{''}\n        <Input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          onChange={handleChange}\n        />\n        <Error name=\"password\" component=\"div\" />\n      </Label>\n\n      <Button\n        type=\"submit\"\n        disabled={!dirty || !values.email || !values.password}\n      >\n        Log In\n      </Button>\n    </Forma>\n  );\n};\n","import { Formik } from 'formik';\n// import { FormWrap } from 'components/RegistrationForm/RegistrationForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { setError, setToken, setUser } from 'redux/authorization/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useLogInMutation } from 'redux/authorization/authApi';\nimport Loader from 'components/Loader/Loader';\nimport { LoginFormContext } from './LoginFormContext';\nimport { Notify } from 'notiflix';\nimport { Container } from 'components/App.styled';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [register, { isLoading }] = useLogInMutation();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      const response = await register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      }).unwrap();\n\n      if (response.token) {\n        dispatch(setToken(response.token));\n        dispatch(setUser(response.user));\n        navigate('/contacts');\n      }\n    } catch (error) {\n      Notify.failure(`Login error: ${error.status}`);\n      dispatch(setError(error));\n      navigate('/login');\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      {() => (\n        <Container>\n          {isLoading && <Loader />} <LoginFormContext />\n        </Container>\n      )}\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\n\nexport default function Login  ()  {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Login</title>\n        </Helmet>\n        <LoginForm />\n      </HelmetProvider>\n    </>\n  );\n}\n"],"names":["Container","styled","Title","ContainerHome","Forma","Form","Label","Input","Field","Button","Error","ErrorMessage","LoginFormContext","useFormikContext","values","handleChange","dirty","handleSubmit","onSubmit","htmlFor","id","name","type","value","email","onChange","component","password","disabled","LoginForm","dispatch","useDispatch","navigate","useNavigate","useLogInMutation","register","isLoading","resetForm","unwrap","response","token","setToken","setUser","user","Notify","status","setError","initialValues","Loader","Login"],"sourceRoot":""}