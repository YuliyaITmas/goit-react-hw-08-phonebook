{"version":3,"file":"static/js/433.38b5a296.chunk.js","mappings":"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","sources":["components/App.styled.jsx","components/RegistrationForm/RegistrationForm.styled.jsx","components/RegistrationForm/RegistrationFormContext.jsx","components/RegistrationForm/RegistrationForm.jsx","pages/Registration.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #010101;\n  gap: 50px;\n  margin-top: 50px;\n`;\nexport const MainTitle = styled.h1`\n  font-size: 60px;\n  font-weight: bold;\n`;\nexport const Title = styled.h2`\n  font-size: 50px;\n`;\nexport const ContainerHome = styled.div`\nmargin-left:auto;\nmargin-right:auto;\n  text-align: center;\n  max-width: 500px;\n  color: #010101;\n  margin-top: 50px;\n`;\n","import styled from '@emotion/styled';\n\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  gap: 30px;\n  flex-direction: column;\n  align-items: center;\n  width: 460px;\n  padding: 50px 20px;\n  // border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  // background-color: white;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 26px;\n  font-weight: bold;\n`;\n\nexport const Input = styled(Field)`\n  padding: 8px;\n  border: 1px solid #ccc;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  font-size: 24px;\n  width: 100%;\n  min-width: 300px;\n  margin-top: 5px;\n  transition: all 0.4s ease-in-out;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.4);\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: #444;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  font-size: 20px;\n  font-weight: bold;\n  cursor: pointer;\n  text-transform: uppercase;\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);\n  transition: all 0.4s ease-in-out;\n\n  &:hover {\n    background-color: #333;\n    transform: scale(1.05);\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n  margin-top: 5px;\n  max-width: 200px;\n`;\n\nexport const FormWrap = styled.div`\n\n\n`;","\n\nimport React from 'react';\n\nimport { useFormikContext } from 'formik';\nimport {\n  Forma,\n  Label,\n  Input,\n  Button,\n  Error,\n} from 'components/RegistrationForm/RegistrationForm.styled';\n\n\n\nexport const RegistrationFormContext = () => {\n  const {\n    values,\n    handleChange,\n    errors,\n    touched,\n    handleBlur,\n    isValid,\n    dirty,\n    handleSubmit,\n  } = useFormikContext();\n\n  return (\n    <Forma onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">\n        Name{''}\n        <Input\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={values.name}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          pattern=\"^[А-Яа-яЁёіІїЇґҐa-zA-Z]+([-\\s][А-Яа-яЁёіІїЇґҐa-zA-Z]+)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        />\n        {touched.name && errors.name && <Error>{errors.name}</Error>}\n        <Error name=\"name\" component=\"div\" />\n      </Label>\n\n      <Label htmlFor=\"email\">\n        Email{''}\n        <Input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Enter email\"\n          value={values.email}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          pattern=\".{6,}@mail\\.com\"\n          title=\"Please enter a valid email address ending with @mail.com. The part before '@' should be at least 6 characters long.\"\n        />\n        {touched.email && errors.email && <Error>{errors.email}</Error>}\n        <Error name=\"email\" component=\"div\" />\n      </Label>\n\n      <Label htmlFor=\"password\">\n        Password{''}\n        <Input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Enter password\"\n          value={values.password}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          title=\"Password should be of minimum 8 characters length\"\n        />\n        {touched.password && errors.password && (\n          <Error>{errors.password}</Error>\n        )}\n        <Error name=\"password\" component=\"div\" />\n      </Label>\n\n      <Button type=\"submit\" disabled={!dirty || !isValid}>\n        Sign Up\n      </Button>\n    </Forma>\n  );\n};\n","import { Formik } from 'formik';\nimport { RegistrationFormContext } from 'components/RegistrationForm/RegistrationFormContext';\nimport * as yup from 'yup';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { useRegisterMutation } from 'redux/authorization/authApi';\nimport { useDispatch } from 'react-redux';\nimport { setError, setToken } from 'redux/authorization/authSlice';\nimport Loader from 'components/Loader/Loader';\nimport { useNavigate } from 'react-router-dom';\n\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [register, { isLoading }] = useRegisterMutation();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    // alert(JSON.stringify(values, null, 2));\n    try {\n      const response = await register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      }).unwrap();\n\n      if (response.token) {\n        dispatch(setToken(response.token));\n        navigate('/login');\n      }\n\n      resetForm();\n    } catch (error) {\n      Notify.failure(`Registration error: ${error.status}`);\n      dispatch(setError(error));\n      navigate('/registration');\n    }\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Name must be at least 3 characters')\n      .max(30, 'Name must be at most 20 characters')\n      .matches(\n        /^[А-Яа-яЁёіІїЇґҐa-zA-Z]+([-\\s][А-Яа-яЁёіІїЇґҐa-zA-Z]+)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n      )\n      .required('Name is required'),\n    email: yup\n      .string()\n      .matches(\n        /.{6,}@mail\\.com$/,\n        'Email should end with @mail.com and have at least 6 characters before @'\n      )\n      .required('Email is required'),\n\n    password: yup\n      .string()\n      .min(8, 'Password should be of minimum 8 characters length')\n      .required('Password is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {() => (\n        <>\n          {isLoading && <Loader />} <RegistrationFormContext />\n        </>\n      )}\n    </Formik>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegistrationForm } from 'components/RegistrationForm/RegistrationForm';\nimport { Container } from 'components/App.styled';\n\nexport default function Registration  ()  {\n return (\n   <Container>\n     <HelmetProvider>\n       <Helmet>\n         <title>Registration</title>\n       </Helmet>\n       <RegistrationForm />\n     </HelmetProvider>\n   </Container>\n );\n};\n"],"names":["Container","styled","Title","ContainerHome","Forma","Form","Label","Input","Field","Button","Error","ErrorMessage","RegistrationFormContext","useFormikContext","values","handleChange","errors","touched","handleBlur","isValid","dirty","handleSubmit","onSubmit","htmlFor","id","name","type","placeholder","value","onBlur","onChange","pattern","title","component","email","password","disabled","RegistrationForm","dispatch","useDispatch","navigate","useNavigate","useRegisterMutation","register","isLoading","resetForm","unwrap","response","token","setToken","Notify","status","setError","validationSchema","yup","shape","min","max","matches","required","initialValues","Loader","Registration"],"sourceRoot":""}